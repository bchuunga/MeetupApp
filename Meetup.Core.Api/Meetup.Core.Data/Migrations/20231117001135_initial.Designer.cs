// <auto-generated />
using System;
using Meetup.Core.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Meetup.Core.Data.Migrations
{
    [DbContext(typeof(MeetupContext))]
    [Migration("20231117001135_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Meetup.Core.Data.Entities.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.Meetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Meetups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            Date = new DateTime(2023, 11, 26, 16, 11, 35, 883, DateTimeKind.Local).AddTicks(4607),
                            IsPrivate = true,
                            Name = "Angular 17",
                            Organizer = "Google"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 2,
                            Date = new DateTime(2023, 7, 29, 16, 11, 35, 883, DateTimeKind.Local).AddTicks(4612),
                            IsPrivate = false,
                            Name = ".NET 8",
                            Organizer = "Microsoft"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 3,
                            Date = new DateTime(2024, 1, 5, 16, 11, 35, 883, DateTimeKind.Local).AddTicks(4614),
                            IsPrivate = true,
                            Name = "SQL",
                            Organizer = "Microsoft"
                        });
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2003, 11, 16, 16, 11, 35, 883, DateTimeKind.Local).AddTicks(4543),
                            Email = "admin@email.com",
                            FirstName = "admin",
                            LastName = "admin",
                            Nationality = "American",
                            PasswordHash = "pass1",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2013, 11, 16, 16, 11, 35, 883, DateTimeKind.Local).AddTicks(4591),
                            Email = "moderator@email.com",
                            FirstName = "moderator",
                            LastName = "moderator",
                            Nationality = "American",
                            PasswordHash = "pass1",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1968, 11, 16, 16, 11, 35, 883, DateTimeKind.Local).AddTicks(4595),
                            Email = "user@email.com",
                            FirstName = "user",
                            LastName = "user",
                            Nationality = "American",
                            PasswordHash = "pass1",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.Lecture", b =>
                {
                    b.HasOne("Meetup.Core.Data.Entities.Meetup", "Meetup")
                        .WithMany("Lectures")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meetup");
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.Location", b =>
                {
                    b.HasOne("Meetup.Core.Data.Entities.Meetup", "Meetup")
                        .WithOne("Location")
                        .HasForeignKey("Meetup.Core.Data.Entities.Location", "MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meetup");
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.Meetup", b =>
                {
                    b.HasOne("Meetup.Core.Data.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.User", b =>
                {
                    b.HasOne("Meetup.Core.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Meetup.Core.Data.Entities.Meetup", b =>
                {
                    b.Navigation("Lectures");

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
